@startuml
' Título do Diagrama
title Diagrama de Classes - Sistema de Ordem de Serviço

' Configurações de Aparência
left to right direction

package "Model" {
    left to right direction

    ' =============================================
    ' ===          CORE - Ordem de Serviço       ===
    ' =============================================
    class OrdemServico {
        -int id
        -double valorOrcamento
        -String descricao
        -Material materialUtilizado
        -Cliente cliente
        -Hardware hardware
        -Tecnico tecnicoResponsavel
        -EstadoOS estadoAtual

        +OrdemServico(cliente, hardware)
        +void setEstado(novoEstado)
        +void abrir()
        +void orcamentar(valor)
        +void aprovar()
        +void executar(material)
        +void finalizar()
        +void cancelar()
    }

    ' =============================================
    ' ===        PATTERN: State (Estado da OS)   ===
    ' =============================================
    interface EstadoOS {
        +abrir(os)
        +orcamentar(os, valor)
        +aprovar(os)
        +executar(os, material)
        +finalizar(os)
        +cancelar(os)
    }

    class EstadoAberta implements EstadoOS
    class EstadoAguardandoAprovacao implements EstadoOS
    class EstadoAprovada implements EstadoOS
    class EstadoEmReparo implements EstadoOS
    class EstadoFinalizada implements EstadoOS
    class EstadoCancelada implements EstadoOS

    OrdemServico o--> "1" EstadoOS : estadoAtual

    ' =============================================
    ' ===                 Atores                 ===
    ' =============================================
    package "Atores" {
        abstract class Pessoa {
            -int id
            -String nome
            -String cpf
            -LocalDate dataNascimento
            -String endereco
        }

        class Tecnico extends Pessoa {
            +fazerOrcamento(os, valor)
            +assumirOS(os)
            +executarOS(os, material)
            +finalizarOS(os)
        }

        class Administrador extends Pessoa {
            +abrirOS(cliente, hardware)
            +atualizarOS(os, cliente, hardware)
            +excluirOS(os)
        }
        
        class Atendente extends Pessoa {
            +abrirOS(cliente, hardware)
            +atualizarOS(os, cliente, hardware)
            +reqExclusao(os, motivo)
        }

        class Cliente extends Pessoa {
            -List<Hardware> hardwares
            +aprovarOS(os)
            +cancelarOS(os)
        }
    }

    ' =============================================
    ' ===      PATTERN: Template Method (Reparo) ===
    ' =============================================
    abstract class TemplateReparo {
        +{final} executarProcessoDeReparo()
        #abstract diagnosticarProblema()
        #abstract realizarReparoPrincipal()
        #abstract realizarTestes()
        #separarMateriaisNecessarios()
        #limpezaFinal()
    }

    class ReparoNotebook extends TemplateReparo
    class ReparoCelular extends TemplateReparo
    class ReparoComputador extends TemplateReparo

    Tecnico ..> TemplateReparo : utiliza

    ' =============================================
    ' ===         Produto e Estoque             ===
    ' =============================================
    package "Produto" {
        class Hardware {
            -TipoHardware tipo
            -String numeroSerie
            -String descricaoProblema
        }

        class Material {
            -List<Peca> pecasUtilizadas
        }

        class Peca {
            -int id
            -String nome
            -TipoPeca tipoPeca
        }

        enum TipoHardware {
            COMPUTADOR
            NOTEBOOK
            CELULAR
            OUTROS
        }

        enum TipoPeca {
            PROCESSADOR
            MEMORIA_RAM
            PLACA_MAE
            TELA
            BATERIA
        }

        class Estoque {
            -Map<Peca, Integer> pecasDisponiveis
            +verPecas()
            +adicionarPecas(peca, quantidade)
            +removerPecas(peca, quantidade)
            +verificarDisponibilidade(peca)
        }
    }
    
    ' =============================================
    ' ===        PATTERN: Singleton (DB)         ===
    ' =============================================
    class DatabaseConnector <<singleton>> {
        -static DatabaseConnector instance
        -Connection connection
        -DatabaseConnector()
        +static getInstance()
    }

    ' =============================================
    ' ===               Relatórios              ===
    ' =============================================
    interface Relatorio {
        +verRelatorioFinanceiro()
        +verRelatorioEstoque()
        +verRelatorioOS()
    }

    Administrador ..|> Relatorio
    
    ' =============================================
    ' ===             Relacionamentos           ===
    ' =============================================
    Cliente "1" -- "0..*" OrdemServico
    Cliente "1" -- "1..*" Hardware
    Tecnico "1" -- "0..*" OrdemServico
    Atendente "1" -- "0..*" OrdemServico
    Administrador "1" -- "0..*" OrdemServico
    
    OrdemServico "1" -- "1" Hardware
    OrdemServico "1" -- "0..1" Material
    
    Material "1" o-- "1..*" Peca
    Estoque "1" o-- "*" Peca
}
@enduml